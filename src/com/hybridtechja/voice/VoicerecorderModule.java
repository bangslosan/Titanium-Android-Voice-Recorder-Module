/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.hybridtechja.voice;

import java.io.IOException;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;

import android.app.Activity;
import android.media.AudioFormat;
import android.media.AudioRecord;
import android.media.MediaRecorder;
import android.os.Environment;
import java.io.File;



@Kroll.module(name="Voicerecorder", id="com.hybridtechja.voice")
public class VoicerecorderModule extends KrollModule
{
	
	   private static final int RECORDER_BPP = 16;
       private static final String AUDIO_RECORDER_FILE_EXT_WAV = ".wav";
       private static final String AUDIO_RECORDER_FOLDER = "AudioRecorder";
       private static final String AUDIO_RECORDER_TEMP_FILE = "record_temp.raw";
       private static final int RECORDER_SAMPLERATE = 44100;
       private static final int RECORDER_CHANNELS = AudioFormat.CHANNEL_IN_STEREO;
       private static final int RECORDER_AUDIO_ENCODING = AudioFormat.ENCODING_PCM_16BIT;
       private int bufferSize = AudioRecord.getMinBufferSize(RECORDER_SAMPLERATE,
    		   RECORDER_CHANNELS, RECORDER_AUDIO_ENCODING);
       
       
       final MediaRecorder recorder = new MediaRecorder();
      
       
  //     private int bufferSize =recorder.getMinBufferSize(RECORDER_SAMPLERATE, RECORDER_CHANNELS, recorder.getAudioFormat());

       private boolean isRecording = false;
      

       

	// Standard Debugging variables
	private static final String TAG = "VoicerecorderModule";

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;
	
	public VoicerecorderModule()
	{
		super();
		
		//this.path = sanitizePath(path);
		
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		Log.d(TAG, "inside onAppCreate");
		// put module init code that needs to run when the application is created
		
		
	}

	
	
	@Kroll.method
	private String sanitizePath(String path){
		if(!path.startsWith("/")){
			path = "/"+path;
		}
		if(!path.contains(".")){
			path +=".3gp";
		}
		
		return  Environment.getExternalStorageDirectory().getAbsolutePath()+path;
		
	}
	@Kroll.getProperty @Kroll.method
	public boolean getRecording(){
		return 	isRecording;
	}
	@Kroll.method
	public void start() throws  IOException
	{
		String PATH_NAME = sanitizePath("myfile");
		
		String state = android.os.Environment.getExternalStorageState();
	    if(!state.equals(android.os.Environment.MEDIA_MOUNTED))  {
	        throw new IOException("SD Card is not mounted.  It is " + state + ".");
	    }

	    // make sure the directory we plan to store the recording in exists
	    File directory = new File(PATH_NAME).getParentFile();
	    if (!directory.exists() && !directory.mkdirs()) {
	      throw new IOException("Path to file could not be created.");
	    }
	    
	    
		
		try{
			recorder.setAudioSource(MediaRecorder.AudioSource.MIC);
		 	recorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);
		 	recorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);
		 	recorder.setOutputFile(PATH_NAME);
		 	recorder.prepare();
		 	recorder.start(); 
			isRecording=true;
		}catch(Exception e){
			e.printStackTrace();
		}

	}

	@Kroll.method
	public void stopRecording() throws  IOException {
	
		try{
			
	       
	               // isRecording = false;
	                recorder.stop();
	                //recorder.release();
	        
	        
		}catch(Exception e){
			e.printStackTrace();
		}
	
	
    }
                
              


}




